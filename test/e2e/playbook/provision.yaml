---
- name: Provision VM, set up single-node Kubernetes cluster
  hosts: all
  become: true
  become_user: root
  vars:
    cri_runtime: "{{ cri_runtime }}"
    k8s_release: "{{ k8s_release }}"
    k8s_version: "{{ k8s_version }}"
    is_containerd: false
    is_crio: false
    containerd_release: "{{ containerd_release }}"
    containerd_tarball: "https://github.com/containerd/containerd/releases/download/v{{ containerd_release }}/containerd-{{ containerd_release }}-linux-amd64.tar.gz"
    containerd_service_file: "https://raw.githubusercontent.com/containerd/containerd/main/containerd.service"
    crio_release: "{{ crio_release }}"
    crio_tarball: "https://storage.googleapis.com/cri-o/artifacts/cri-o.amd64.v{{ crio_release }}.tar.gz"
    helm_release: "{{ helm_release }}"
    helm_tarball: "https://get.helm.sh/helm-v{{ helm_release }}-linux-amd64.tar.gz"
    dns_nameserver: "{{ dns_nameserver }}"
    cni_plugin: "{{ cni_plugin }}"
    cni_release: "{{ cni_release }}"
    cilium_tarball: ""
    cache_dir: "{{ cache_dir }}"
    cached_runtime_tarball: ""
    remote_runtime_tarball: ""
    cached_helm_tarball: "{{ cache_dir }}/{{ helm_tarball | basename }}"

  tasks:
    - name: Check if runtime is containerd
      ansible.builtin.set_fact:
        is_containerd: true
        cached_runtime_tarball: "{{ cache_dir }}/{{ containerd_tarball | basename }}"
        remote_runtime_tarball: "{{ containerd_tarball }}"
      when: cri_runtime == "containerd"
    - name: Check if runtime is CRI-O
      ansible.builtin.set_fact:
        is_crio: true
        cached_runtime_tarball: "{{ cache_dir }}/{{ crio_tarball | basename }}"
        remote_runtime_tarball: "{{ crio_tarball }}"
      when: cri_runtime == "crio"

    - name: Setup DNS
      ansible.builtin.shell: "{{ item }}"
      with_items:
        - rm -f /etc/resolv.conf
        - echo "nameserver {{ dns_nameserver }}" > /etc/resolv.conf
        - echo "search  {{ dns_search_domain }}" >> /etc/resolv.conf
        - sed -i "s/DNS=.*$/DNS={{ dns_nameserver }}/" /etc/systemd/resolved.conf
        - sed -i "s/Domains=.*$/Domains={{ dns_search_domain }}/" /etc/systemd/resolved.conf
      when: dns_nameserver != ""

    - name: Setup DNS for Ubuntu
      ansible.builtin.shell: |
        [ -f /etc/netplan/01-netcfg.yaml ] && sed -i 's/addresses\(.\) \[.*\]$/addresses\1 \[{{ dns_nameserver }}\]/' /etc/netplan/01-netcfg.yaml || :
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Disable swap
      ansible.builtin.shell: "{{ item }}"
      with_items:
        - for swp in `systemctl --type swap | awk '/\.swap/ { print $1 }'`; do systemctl stop "$swp"; systemctl mask "$swp"; done
        - swapoff --all
      when: ansible_swaptotal_mb > 0

    - name: Add Kubernetes APT repository to sources.list.d
      ansible.builtin.copy:
        content: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/ /"
        dest: /etc/apt/sources.list.d/kubernetes.list
        mode: '0644'
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Download Kubernetes APT key
      ansible.builtin.get_url:
        url: https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/Release.key
        dest: /tmp/kubernetes-release.key
        mode: '0644'
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Convert the Kubernetes APT key to keyring format
      ansible.builtin.command:
        cmd: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-release.key
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Clean up temporary key file
      ansible.builtin.file:
        path: /tmp/kubernetes-release.key
        state: absent
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Disable ssh daemon per source penalties
      block:
        - name: Disable ssh daemon per source penalties
          ansible.builtin.copy:
            dest: /etc/ssh/sshd_config.d/90-disable-persource-penalties.conf
            content: |
              PerSourcePenalties no
            mode: '0644'
        - name: Restart ssh daemon
          ansible.builtin.systemd:
            name: sshd
            state: restarted
      when: (ansible_facts['distribution'] == "Fedora") and
            (ansible_facts['distribution_major_version'] | int >= 41)

    - name: Update APT package index
      ansible.builtin.apt:
        update_cache: yes
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Add yum repository for Kubernetes
      ansible.builtin.yum_repository:
        description: Kubernetes repository
        baseurl: "https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/rpm/"
        gpgkey: "https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/rpm/repodata/repomd.xml.key"
        state: present
        name: kubernetes
      when: ansible_facts['distribution'] == "Fedora"

    # Install Helm from a release tarball to /usr/local.
    - name: Install Helm binaries from release tarball
      block:
        - name: Check for cached Helm release tarball
          ansible.builtin.stat:
            path: "{{ cached_helm_tarball }}"
          register: cached_helm
          delegate_to: localhost
          become: false

        - name: Download and cache Helm release tarball
          ansible.builtin.get_url:
            url: "{{ helm_tarball }}"
            dest: "{{ cached_helm_tarball }}"
            mode: '0644'
          when: not cached_helm.stat.exists
          delegate_to: localhost
          become: false

        - name: Install Helm runtime release tarball under /usr/local
          ansible.builtin.unarchive:
            src: "{{ cached_helm_tarball }}"
            dest: /usr/local
            copy: true

        - name: Move Helm binaries to /usr/local/bin from extracted release tarball
          ansible.builtin.shell: "{{ item }}"
          with_items:
            - mv /usr/local/linux-amd64/helm /usr/local/bin
            - rm -fr /usr/local/linux-amd64

    - name: Install ansible.builtin.dnf dependencies
      ansible.builtin.shell: |
        dnf install -y python3-libdnf5
      when: (ansible_facts['distribution'] == "Fedora") and
            (ansible_facts['distribution_major_version'] | int == 41)

    - name: Install common packages
      ansible.builtin.package:
        name:
          - curl
          - runc
          - jq
          - python3-pip
          - kubelet
          - kubeadm
          - kubectl
          - systemd-container
        state: present

    - name: Install apt packages
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - gnupg-agent
          - software-properties-common
        state: present
        update_cache: true
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Install rpm packages
      when: ansible_facts['distribution'] == "Fedora"
      block:
        - name: Common rpm packages
          ansible.builtin.dnf:
            pkg:
              - iproute-tc
              - grubby
              - cloud-utils-growpart
              - btrfs-progs
            state: present
            update_cache: true
        - name: Extra python3 rpm packages for ansible
          ansible.builtin.dnf:
            pkg:
              - python3-libselinux
              - python3-packaging
            state:
              present
          when: ansible_facts['distribution_major_version'] | int >= 40

    - name: Resize root filesystem to the maximum possible
      when: ansible_facts['distribution'] == "Fedora"
      ansible.builtin.shell: |
        fstype="$(stat -f -c %T /)"
        if [ "$fstype" == "btrfs" ]; then
            growpart /dev/vda 4
            status=$?
            case $status in
                 0) btrfs filesystem resize max /;;
                 1) ;; # already at max size
                 *) echo "***** WARNING: failed to grow partition";;
            esac
        else
            echo "***** WARNING: Root filesystem type ($fstype) is not btrfs."
            echo "***** WARNING: resize of / to max possible size..."
            sleep 3
        fi

    - name: Disable SELinux
      ansible.posix.selinux:
        state: disabled
      when: ansible_facts['distribution'] == "Fedora"

    - name: Remove the firewalld package
      ansible.builtin.package:
        name: firewalld
        state: absent
      when: ansible_facts['distribution'] == "Fedora"

    - name: Install additional cri-o packages
      ansible.builtin.dnf:
        pkg:
          - podman
          - cri-o
        state: present
        update_cache: true
      when: ansible_facts['distribution'] == "Fedora" and is_crio

    - name: Install python pip based apps
      ansible.builtin.pip:
        name:
          - toml
          - tomli_w
        state: present

    # Install containerd or CRI-O from a release tarball to /usr/local.
    - name: Install runtime binaries from release tarball
      block:
        - name: Check for cached runtime release tarball
          ansible.builtin.stat:
            path: "{{ cached_runtime_tarball }}"
          register: cached_runtime
          delegate_to: localhost
          become: false

        - name: Download and cache runtime release tarball
          ansible.builtin.get_url:
            url: "{{ remote_runtime_tarball }}"
            dest: "{{ cached_runtime_tarball }}"
            mode: '0644'
          when: not cached_runtime.stat.exists
          delegate_to: localhost
          become: false

        - name: Install runtime release tarball under /usr/local
          ansible.builtin.unarchive:
            src: "{{ cached_runtime_tarball }}"
            dest: /usr/local
            copy: true

        - name: Install CRI-O binaries from release tarball
          ansible.builtin.shell:
            cmd: ./install
            chdir: /usr/local/cri-o
          when: is_crio
      when: (is_containerd and containerd_src == "") or (is_crio and crio_src == "")

    # Install containerd binaries from compiled sources.
    - name: Install containerd binaries from compiled sources
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "/usr/local/bin"
        mode: '0755'
      with_items:
        - "{{ containerd_src }}/bin/ctr"
        - "{{ containerd_src }}/bin/containerd"
        - "{{ containerd_src }}/bin/containerd-shim-runc-v2"
      when: is_containerd and containerd_src != ""

    # Install CRI-O binaries from compiled sources.
    - name: Install CRI-O binaries from compiled sources
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "/usr/local/bin"
        mode: '0755'
      with_items:
        - "{{ crio_src }}/bin/crio"
        - "{{ crio_src }}/bin/crio-status"
        - "{{ crio_src }}/bin/pinns"
      when: is_crio and crio_src != ""

    - name: Install CRI-O systemd service file from compiled sources
      ansible.builtin.copy:
        src: "{{ crio_src }}/contrib/crio.service"
        dest: "/lib/systemd/system/crio.service"
        mode: '0644'
      when: is_crio and crio_src != ""

    - name: Configure runc as the default CRI-O runtime
      when: is_crio
      block:
        - name: Remove CRI-O crun configuration
          ansible.builtin.file:
            state: absent
            path: /etc/crio/crio.conf.d/10-crun.conf

        - name: Make runc the default CRI-O runtime
          ansible.builtin.copy:
            dest: /etc/crio/crio.conf.d/10-runc.conf
            content: |
              [crio.runtime]
              default_runtime = "runc"
            mode: '0644'

    - name: Install containerd systemd service file
      ansible.builtin.get_url:
        url: "{{ containerd_service_file }}"
        dest: /lib/systemd/system/containerd.service
        owner: root
        group: root
        mode: '0644'
      when: is_containerd

    - name: Create service.d directory for the runtime
      ansible.builtin.file:
        path: "/etc/systemd/system/{{ cri_runtime }}.service.d"
        state: directory
        mode: '0755'

    - name: Set up proxies for the runtime
      ansible.builtin.copy:
        dest: "/etc/systemd/system/{{ cri_runtime }}.service.d/proxy.conf"
        content: |
          [Service]
          Environment=HTTP_PROXY="{{ http_proxy }}"
          Environment=HTTPS_PROXY="{{ https_proxy }}"
          Environment=NO_PROXY="{{ no_proxy }}"
        mode: '0644'

    # First issue daemon-reload to pick up config changes
    - name: Start runtime
      ansible.builtin.systemd:
        name: "{{ cri_runtime }}"
        daemon_reload: true
        state: started
        enabled: true

    - name: Copy containerd nri enable script
      ansible.builtin.copy:
        src: "{{ nri_resource_policy_src }}/test/e2e/files/containerd-nri-enable"
        dest: /usr/local/bin/containerd-nri-enable
        owner: root
        group: root
        mode: '0755'
      when: is_containerd

    - name: Configure containerd
      when: is_containerd
      block:
        - name: Create drop-in directory (/etc/containerd/conf.d)
          ansible.builtin.file:
            path: /etc/containerd/conf.d
            state: directory

        - name: Generate default configuration (/etc/containerd/config.toml)
          ansible.builtin.shell: containerd config default > /etc/containerd/config.toml

        - name: Enable drop-in directory in configuration
          ansible.builtin.lineinfile:
            path: /etc/containerd/config.toml
            regexp: '^imports *=.*'
            line: 'imports = [ "/etc/containerd/conf.d/*.toml" ]'
            state: present

        - name: Enable all plugins
          ansible.builtin.lineinfile:
            path: /etc/containerd/config.toml
            regexp: '^disabled_plugins *=.*'
            line: 'disabled_plugins = []'
            state: present

        - name: Enable systemd cgroup driver
          ansible.builtin.copy:
            dest: /etc/containerd/conf.d/systemd-cgroup.toml
            content: |
              [plugins.'io.containerd.cri.v1.runtime'.containerd.runtimes.runc.options]
              SystemdCgroup = true

        - name: Update CNI plugin directory on Fedora
          when: ansible_facts['distribution'] == "Fedora"
          ansible.builtin.replace:
            path: /etc/containerd/config.toml
            regexp: '/opt/cni/bin'
            replace: '/usr/libexec/cni'

    - name: Configure bridge CNI plugin
      when: cni_plugin == "bridge"
      block:
        - name: Copy CNI bridge plugin configuration
          ansible.builtin.copy:
            src: "{{ nri_resource_policy_src }}/test/e2e/files/10-bridge.conf.in"
            dest: "/etc/cni/net.d/10-bridge.conf"
            owner: root
            group: root
            mode: '0644'

        - name: Update CNI bridge plugin configuration
          ansible.builtin.replace:
            path: /etc/cni/net.d/10-bridge.conf
            regexp: '(CNI_NETWORK)'
            replace: "{{ network }}"

    - name: Setup NRI
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - "/etc/nri/conf.d"
        - "/opt/nri/plugins"

    - name: Enable NRI for containerd
      ansible.builtin.command:
        cmd: /usr/local/bin/containerd-nri-enable
      when: is_containerd

    - name: Restart the containerd
      ansible.builtin.systemd:
        state: restarted
        name: "{{ cri_runtime }}"
        daemon_reload: true
      when: is_containerd

    - name: Copy CRI-O NRI enable script
      ansible.builtin.copy:
        src: "{{ nri_resource_policy_src }}/test/e2e/files/crio-nri-enable"
        dest: /usr/local/bin/crio-nri-enable
        owner: root
        group: root
        mode: '0755'
      when: is_crio

    - name: Enable NRI for CRI-O
      ansible.builtin.command:
        cmd: /usr/local/bin/crio-nri-enable
      when: is_crio

    - name: Restart CRI-O
      ansible.builtin.systemd:
        state: restarted
        name: "{{ cri_runtime }}"
        daemon_reload: true
      when: is_crio

    - name: Remove swapfile from /etc/fstab
      ansible.posix.mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Fulfill pre-flight requirements for k8s
      ansible.builtin.shell: "{{ item }}"
      with_items:
        - rm -f /etc/modules-load.d/k8s.conf
        - touch /etc/modules-load.d/k8s.conf
        - modprobe bridge && echo bridge >> /etc/modules-load.d/k8s.conf || true
        - modprobe nf-tables-bridge && echo nf-tables-bridge >> /etc/modules-load.d/k8s.conf || true
        - modprobe br_netfilter && echo br_netfilter >> /etc/modules-load.d/k8s.conf || true
        - touch /etc/sysctl.d/k8s.conf
        - echo "net.bridge.bridge-nf-call-ip6tables = 1" >> /etc/sysctl.d/k8s.conf
        - echo "net.bridge.bridge-nf-call-iptables = 1" >> /etc/sysctl.d/k8s.conf
        - echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.d/k8s.conf
        # rp_filter (partially) mitigates DDOS attacks with spoofed IP addresses
        # by dropping packages with non-routable (unanswerable) source addresses.
        # However, rp_filter > 0 breaks cilium networking. Make sure it's disabled.
        - echo "net.ipv4.conf.*.rp_filter = 0" >> /etc/sysctl.d/k8s.conf
        - sysctl -p /etc/sysctl.d/k8s.conf || true

    - name: Restart kubelet
      ansible.builtin.service:
        name: kubelet
        daemon_reload: true
        state: restarted

    - name: Initialize the Kubernetes cluster using kubeadm
      ansible.builtin.command:
        cmd: kubeadm init --pod-network-cidr="{{ network }}"

    - name: Setup kubeconfig for vagrant user
      ansible.builtin.command: "{{ item }}"
      with_items:
        - mkdir -p /home/vagrant/.kube
        - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
        - chown vagrant:vagrant /home/vagrant/.kube/config
        - mkdir -p /root/.kube
        - cp -i /etc/kubernetes/admin.conf /root/.kube/config

    - name: Install single-node cluster
      become: false
      ansible.builtin.shell: "{{ item }}"
      with_items:
        - kubectl taint nodes --all node-role.kubernetes.io/control-plane- || true
        - kubectl taint nodes --all node-role.kubernetes.io/master- || true

    - name: Install cilium CNI plugin
      when: cni_plugin == "cilium"
      block:
        - name: "Use irregular download path if cilium release is latest"
          when: cni_release == "latest"
          ansible.builtin.set_fact:
            cilium_tarball: https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz

        - name: "Use regular download path if cilium release is not latest"
          when: cni_release != "latest"
          ansible.builtin.set_fact:
            cilium_tarball: https://github.com/cilium/cilium-cli/releases/download/{{ cni_release }}/cilium-linux-amd64.tar.gz

        - name: "Fetch and extract {{ cni_release }} cilium (installer) release tarball"
          ansible.builtin.unarchive:
            src: "{{ cilium_tarball }}"
            dest: /usr/local/bin
            remote_src: true

        - name: Run cilium installer
          ansible.builtin.command: "{{ item }}"
          with_items:
            - cilium install --wait
            - cilium status --wait

    - name: Generate join command
      ansible.builtin.command:
        cmd: kubeadm token create --print-join-command
      register: join_command

    - name: Copy join command to local file
      delegate_to: localhost
      become: false
      ansible.builtin.copy:
        content: "{{ join_command.stdout_lines[0] }}"
        dest: "{{ outdir }}/join-command"
        mode: '0644'

    - name: Enable kubelet systemd service
      ansible.builtin.systemd:
        name: kubelet
        enabled: true
