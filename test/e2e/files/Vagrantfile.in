# -*- mode: ruby -*-
# vi: set ft=ruby :

ENV['VAGRANT_DEFAULT_PROVIDER'] = 'qemu'

Dotenv.load("env")

# Distro image to use
IMAGE_NAME = "DISTRO"

# Hostname of the system
HOSTNAME = "SERVER_NAME"

# How many nodes to create
N = 1

CRI_RUNTIME = "#{ENV['k8scri']}"
CRIO_RELEASE = "1.28.1"
CRIO_SRC = ""
CONTAINERD_RELEASE = ""
CONTAINERD_SRC = ""

if CRI_RUNTIME == "containerd"
  CONTAINERD_RELEASE = "#{ENV['containerd_release']}"
  CONTAINERD_SRC = "#{ENV['containerd_src']}"
else
  CRIO_RELEASE = "#{ENV['crio_release']}"
  CRIO_SRC = "#{ENV['crio_src']}"
end

CNI_PLUGIN = "#{ENV['cni_plugin']}"
CNI_RELEASE = "#{ENV['cni_release']}"

NRI_RESOURCE_POLICY_SRC = "#{ENV['nri_resource_policy_src']}"
OUTPUT_DIR = "#{ENV['OUTPUT_DIR']}"

# Each VM should have its own ssh port so that we can have multiple
# VM in the host side that will not have conflicting source port
# values. Use the value that is set in the caller script and placed in
# the environment file.
# Note that the port value cannot be changed after the VM is created.
SSH_PORT = "#{ENV['SSH_PORT']}".to_i

REQUIRED_PLUGINS = %w(vagrant-proxyconf vagrant-qemu)
exit unless REQUIRED_PLUGINS.all? do |plugin|
  Vagrant.has_plugin?(plugin) || (
    puts "The #{plugin} plugin is required. Please install it with:"
    puts "$ vagrant plugin install #{plugin}"
    false
  )
end

Vagrant.configure("2") do |config|
  config.vm.define HOSTNAME
  config.vm.hostname = HOSTNAME
  config.vm.box = IMAGE_NAME
  config.vm.disk :disk, size: "#{ENV['VM_DISK_SIZE']}", primary: true
  config.vm.box_check_update = false
  config.nfs.functional = false
  config.vm.network "forwarded_port", id: "ssh", host: SSH_PORT, guest: 22

  if Vagrant.has_plugin?("vagrant-proxyconf")
    config.proxy.http     = "#{ENV['HTTP_PROXY']}"
    config.proxy.https    = "#{ENV['HTTPS_PROXY']}"
    config.proxy.no_proxy = "#{ENV['NO_PROXY']}"
  end

  config.vm.provider "qemu" do |qemu|
    qemu.memory = "QEMU_MEM"
    qemu.arch = "x86_64"
    qemu.machine = "QEMU_MACHINE"
    qemu.cpu = "host"
    qemu.net_device = "virtio-net-pci"
    qemu.extra_netdev_args = "net=192.168.76.0/24,dhcpstart=192.168.76.9"
    qemu.ssh_port = SSH_PORT
    qemu.qemu_dir = "/usr/share/OVMF"
    qemu.smp = "QEMU_SMP"
    qemu.extra_qemu_args = ["-enable-kvm",QEMU_EXTRA_ARGS]
  end

  config.vm.provision :ansible do |ansible|
    ansible.playbook = "#{ENV['nri_resource_policy_src']}/test/e2e/playbook/provision.yaml"
    ansible.extra_vars = {
      network: "10.217.0.0/16",
      hostname: HOSTNAME,
      dns_nameserver: "#{ENV['DNS_NAMESERVER']}",
      dns_search_domain: "#{ENV['DNS_SEARCH_DOMAIN']}",
      https_proxy: "#{ENV['HTTPS_PROXY']}",
      http_proxy: "#{ENV['HTTP_PROXY']}",
      no_proxy: "#{ENV['NO_PROXY']}",
      cri_runtime: CRI_RUNTIME,
      containerd_release: CONTAINERD_RELEASE,
      containerd_src: CONTAINERD_SRC,
      crio_release: CRIO_RELEASE,
      crio_src: CRIO_SRC,
      cni_plugin: CNI_PLUGIN,
      cni_release: CNI_RELEASE,
      nri_resource_policy_src: NRI_RESOURCE_POLICY_SRC,
      outdir: OUTPUT_DIR,
    }
  end
end
