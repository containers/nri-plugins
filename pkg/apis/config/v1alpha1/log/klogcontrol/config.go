// Code generated by go generate; DO NOT EDIT.
// generated by: gen-config klogcontrol Config config.go

package klogcontrol

import (
    "fmt"
)

// +k8s:deepcopy-gen=true
type Config struct {
    // +optional
    Add_dir_header *bool `json:"add_dir_header,omitempty"`
    // +optional
    Alsologtostderr *bool `json:"alsologtostderr,omitempty"`
    // +optional
    Log_backtrace_at *string `json:"log_backtrace_at,omitempty"`
    // +optional
    Log_dir *string `json:"log_dir,omitempty"`
    // +optional
    Log_file *string `json:"log_file,omitempty"`
    // +optional
    Log_file_max_size *uint64 `json:"log_file_max_size,omitempty"`
    // +optional
    Logtostderr *bool `json:"logtostderr,omitempty"`
    // +optional
    One_output *bool `json:"one_output,omitempty"`
    // +optional
    Skip_headers *bool `json:"skip_headers,omitempty"`
    // +optional
    Skip_log_headers *bool `json:"skip_log_headers,omitempty"`
    // +optional
    Stderrthreshold *string `json:"stderrthreshold,omitempty"`
    // +optional
    V *int `json:"v,omitempty"`
    // +optional
    Vmodule *string `json:"vmodule,omitempty"`
}

func (f *Config) GetByFlag(name string) (string, bool) {
    switch name {
    case "add_dir_header":
        if ptr := f.Add_dir_header; ptr != nil {
            return fmt.Sprintf("%v", *ptr), true
        }
    case "alsologtostderr":
        if ptr := f.Alsologtostderr; ptr != nil {
            return fmt.Sprintf("%v", *ptr), true
        }
    case "log_backtrace_at":
        if ptr := f.Log_backtrace_at; ptr != nil {
            return fmt.Sprintf("%v", *ptr), true
        }
    case "log_dir":
        if ptr := f.Log_dir; ptr != nil {
            return fmt.Sprintf("%v", *ptr), true
        }
    case "log_file":
        if ptr := f.Log_file; ptr != nil {
            return fmt.Sprintf("%v", *ptr), true
        }
    case "log_file_max_size":
        if ptr := f.Log_file_max_size; ptr != nil {
            return fmt.Sprintf("%v", *ptr), true
        }
    case "logtostderr":
        if ptr := f.Logtostderr; ptr != nil {
            return fmt.Sprintf("%v", *ptr), true
        }
    case "one_output":
        if ptr := f.One_output; ptr != nil {
            return fmt.Sprintf("%v", *ptr), true
        }
    case "skip_headers":
        if ptr := f.Skip_headers; ptr != nil {
            return fmt.Sprintf("%v", *ptr), true
        }
    case "skip_log_headers":
        if ptr := f.Skip_log_headers; ptr != nil {
            return fmt.Sprintf("%v", *ptr), true
        }
    case "stderrthreshold":
        if ptr := f.Stderrthreshold; ptr != nil {
            return fmt.Sprintf("%v", *ptr), true
        }
    case "v":
        if ptr := f.V; ptr != nil {
            return fmt.Sprintf("%v", *ptr), true
        }
    case "vmodule":
        if ptr := f.Vmodule; ptr != nil {
            return fmt.Sprintf("%v", *ptr), true
        }
    }
    return "", false
}
