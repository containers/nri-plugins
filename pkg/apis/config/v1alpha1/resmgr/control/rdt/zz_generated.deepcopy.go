//go:build !ignore_autogenerated

// Copyright The NRI Plugins Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by controller-gen. DO NOT EDIT.

package rdt

import ()

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CacheIdCatConfig) DeepCopyInto(out *CacheIdCatConfig) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CacheIdCatConfig.
func (in *CacheIdCatConfig) DeepCopy() *CacheIdCatConfig {
	if in == nil {
		return nil
	}
	out := new(CacheIdCatConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CatOptions) DeepCopyInto(out *CatOptions) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CatOptions.
func (in *CatOptions) DeepCopy() *CatOptions {
	if in == nil {
		return nil
	}
	out := new(CatOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClassConfig) DeepCopyInto(out *ClassConfig) {
	*out = *in
	if in.L2Allocation != nil {
		in, out := &in.L2Allocation, &out.L2Allocation
		*out = make(CatConfig, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.L3Allocation != nil {
		in, out := &in.L3Allocation, &out.L3Allocation
		*out = make(CatConfig, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MBAllocation != nil {
		in, out := &in.MBAllocation, &out.MBAllocation
		*out = make(MbaConfig, len(*in))
		for key, val := range *in {
			var outVal []MbProportion
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make(CacheIdMbaConfig, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClassConfig.
func (in *ClassConfig) DeepCopy() *ClassConfig {
	if in == nil {
		return nil
	}
	out := new(ClassConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Config) DeepCopyInto(out *Config) {
	*out = *in
	out.Options = in.Options
	if in.Partitions != nil {
		in, out := &in.Partitions, &out.Partitions
		*out = make(map[string]PartitionConfig, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Config.
func (in *Config) DeepCopy() *Config {
	if in == nil {
		return nil
	}
	out := new(Config)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MbOptions) DeepCopyInto(out *MbOptions) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MbOptions.
func (in *MbOptions) DeepCopy() *MbOptions {
	if in == nil {
		return nil
	}
	out := new(MbOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Options) DeepCopyInto(out *Options) {
	*out = *in
	out.L2 = in.L2
	out.L3 = in.L3
	out.MB = in.MB
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Options.
func (in *Options) DeepCopy() *Options {
	if in == nil {
		return nil
	}
	out := new(Options)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PartitionConfig) DeepCopyInto(out *PartitionConfig) {
	*out = *in
	if in.L2Allocation != nil {
		in, out := &in.L2Allocation, &out.L2Allocation
		*out = make(CatConfig, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.L3Allocation != nil {
		in, out := &in.L3Allocation, &out.L3Allocation
		*out = make(CatConfig, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MBAllocation != nil {
		in, out := &in.MBAllocation, &out.MBAllocation
		*out = make(MbaConfig, len(*in))
		for key, val := range *in {
			var outVal []MbProportion
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make(CacheIdMbaConfig, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
	}
	if in.Classes != nil {
		in, out := &in.Classes, &out.Classes
		*out = make(map[string]ClassConfig, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PartitionConfig.
func (in *PartitionConfig) DeepCopy() *PartitionConfig {
	if in == nil {
		return nil
	}
	out := new(PartitionConfig)
	in.DeepCopyInto(out)
	return out
}
