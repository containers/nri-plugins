// Copyright The NRI Plugins Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1alpha1 "github.com/containers/nri-plugins/pkg/apis/config/v1alpha1"
	scheme "github.com/containers/nri-plugins/pkg/generated/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// TopologyAwarePoliciesGetter has a method to return a TopologyAwarePolicyInterface.
// A group's client should implement this interface.
type TopologyAwarePoliciesGetter interface {
	TopologyAwarePolicies(namespace string) TopologyAwarePolicyInterface
}

// TopologyAwarePolicyInterface has methods to work with TopologyAwarePolicy resources.
type TopologyAwarePolicyInterface interface {
	Create(ctx context.Context, topologyAwarePolicy *v1alpha1.TopologyAwarePolicy, opts v1.CreateOptions) (*v1alpha1.TopologyAwarePolicy, error)
	Update(ctx context.Context, topologyAwarePolicy *v1alpha1.TopologyAwarePolicy, opts v1.UpdateOptions) (*v1alpha1.TopologyAwarePolicy, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, topologyAwarePolicy *v1alpha1.TopologyAwarePolicy, opts v1.UpdateOptions) (*v1alpha1.TopologyAwarePolicy, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.TopologyAwarePolicy, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.TopologyAwarePolicyList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.TopologyAwarePolicy, err error)
	TopologyAwarePolicyExpansion
}

// topologyAwarePolicies implements TopologyAwarePolicyInterface
type topologyAwarePolicies struct {
	*gentype.ClientWithList[*v1alpha1.TopologyAwarePolicy, *v1alpha1.TopologyAwarePolicyList]
}

// newTopologyAwarePolicies returns a TopologyAwarePolicies
func newTopologyAwarePolicies(c *ConfigV1alpha1Client, namespace string) *topologyAwarePolicies {
	return &topologyAwarePolicies{
		gentype.NewClientWithList[*v1alpha1.TopologyAwarePolicy, *v1alpha1.TopologyAwarePolicyList](
			"topologyawarepolicies",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1alpha1.TopologyAwarePolicy { return &v1alpha1.TopologyAwarePolicy{} },
			func() *v1alpha1.TopologyAwarePolicyList { return &v1alpha1.TopologyAwarePolicyList{} }),
	}
}
