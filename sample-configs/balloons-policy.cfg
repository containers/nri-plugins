policy:
  Active: balloons
  # Use only 15 CPUs in total, leave cpu0 for other than Kubernetes
  # processes.
  AvailableResources:
    CPU: cpuset:1-15
  # Reserve one of our CPUs (cpu15) for kube-system tasks.
  ReservedResources:
    CPU: cpuset:15
  balloons:
    # PinCPU: allow containers to use only the CPUs in their balloons.
    PinCPU: true
    # PinMemory: allow containers to use only the closest memory to
    # the CPUs in their balloons.
    PinMemory: true
    # IdleCPUClass: how to configure CPUs that are not included in any
    # of the balloons.
    IdleCPUClass: idle
    BalloonTypes:
      - Name: "full-core-turbo"
        # MinCPUs: minimum number of logical cores in every balloon
        # instance of this type.
        # The default is 0.
        MinCPUs: 2
        # MaxCPUs: maximum number of logical cores in every balloon
        # instance of this type.
        # The default is 0 (unlimited).
        MaxCPUs: 2
        # CPUClass: how to configure CPUs of these balloons.
        # The default is "".
        CPUClass: "turbo"
        # Namespaces: assign pods in listed namespaces to these
        # balloons, even if there is no explicit annotation:
        # balloon.balloons.nri-resmgr.intel.com: full-core-turbo
        # The default is to assign only annotated pods.
        Namespaces:
          - "highperf"
        # AllocatorPriotity: CPU allocator priority (0: High, 1:
        # Normal, 2: Low, 3: None). Affects the performance/type of
        # CPUs that are selected into the balloon. CPUs for static
        # balloon instances (MinBalloons > 0) with highest
        # AllocatorPriority are reserved first.
        # The default is 0.
        AllocatorPriority: 2
        # MinBalloons: how many balloon instances of this type are always
        # kept in the system, even if there would not be workloads to them.
        # The default is 0.
        MinBalloons: 2
        # PreferNewBalloons: prefer creating a new balloon for
        # separate pods, even if their CPU requirements would allow
        # putting them in the same balloon.
        # The default is: false.
        PreferNewBalloons: true
        # PreferPerNamespaceBalloon: if true, containers in the same
        # namespace are preferrably placed in the same balloon, and
        # containers in different namespaces to different
        # balloons. The default is false: namespaces have no effect on
        # placement.
        PreferPerNamespaceBalloon: false
        # PreferSpreadingPods: if true, containers of single pod can
        # be assigned in different balloons, based on which balloons
        # have most free CPU resources.
        # The default is: false: prefer running containers of a same
        # pod in the same balloon(s).
        PreferSpreadingPods: false

      - Name: "socket-size"
        MaxCPUs: 8
        AllocatorPriority: 2
        Namespaces:
          - "default"
        CPUClass: "normal"
# CPU controller configuration specifies CPU class properties. CPUs of
# each balloon are configured based on its CPUClass. If a balloon has
# no CPUClass, the properties of the default class are applied.
cpu:
  classes:
    default:
      minFreq: 800
      maxFreq: 1600
    turbo:
      minFreq: 3300
      maxFreq: 3600
    normal:
      minFreq: 800
      maxFreq: 2400
instrumentation:
  # The balloons policy exports containers running in each balloon,
  # and cpusets of balloons. Accessible in command line:
  # curl --silent http://localhost:8891/metrics
  HTTPEndpoint: :8891
  PrometheusExport: true
logger:
  Debug: policy
